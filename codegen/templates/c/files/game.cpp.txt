//Copyright (C) 2009 - Missouri S&T ACM AI Team
//Please do not modify this file while building your AI
//See AI.h & AI.cpp for that
#pragma warning(disable : 4996)

#include <string>
#include <cstring>
#include <cstdlib>
#include <iostream>
#include <sstream>
#include <fstream>

#include "game.h"
#include "network.h"
#include "structures.h"

#include "sexp/sexp.h"
#include "sexp/sexp_ops.h"

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>

#ifdef WIN32
//Doh, namespace collision.
namespace Windows
{
    #include <Windows.h>
};
#else
#include <unistd.h>
#endif

using namespace std;

static int turnNumber = 0;
static char logID[100]="";

static int socket;




DLLEXPORT bool login(int s, const char* username, const char* password)
{
  socket = s;

  string expr = "(login \"";
  expr += username;
  expr += "\" \"";
  expr += password;
  expr +="\")";

  send_string(socket, expr.c_str());

  sexp_t* expression;

  expression = extract_sexpr(rec_string(socket));
  expression = expression->list;
  if(expression->val == NULL || strcmp(expression->val, "login-accepted") != 0)
  {
    cerr << "Unable to login to server" << endl;
    return false;
  }
  return true;
}

DLLEXPORT void createGame()
{
  send_string(socket, "(create-game)");
}

DLLEXPORT void joinGame(int id)
{
  stringstream expr;
  expr << "(join-game " << id << ")";
  send_string(socket, expr.str().c_str());
  send_string(socket, "(game-start)");
}

DLLEXPORT void endTurn()
{
  send_string(socket, "(end-turn)");
}

DLLEXPORT void getStatus()
{
  send_string(socket, "(game-status)");
}

DLLEXPORT int networkLoop(int socket)
{
  while(true)
  {
    sexp_t* expression, *sub;
    expression = extract_sexpr(rec_string(socket));
    expression = expression->list;
    if(expression->val != NULL && strcmp(expression->val, "game-over") == 0)
    {
      char request[100]="(request-log ";
      strcat(request, logID);
      strcat(request, ")");
      send_string(socket, request);
      return 0;
    }
    else if(expression->val != NULL && strcmp(expression->val, "log") == 0)
    {
      ofstream out;
      char filename[100];
      expression = expression->next;
      strcpy(filename, expression->val);
      strcat(filename, ".gamelog");
      expression = expression->next;
      out.open(filename);
      if (out.good())
        out.write(expression->val, strlen(expression->val));
      else
        cerr << "Error : Could not create log." << endl;
      out.close();
      return 0;
    }
    else if(expression->val != NULL && strcmp(expression->val, "game-accepted")==0)
    {
      char gameID[30];

      expression = expression->next;
      strcpy(gameID, expression->val);
      cout << "Created game " << gameID << endl;
    }
    else if(expression->val != NULL && strstr(expression->val, "denied"))
    {
      cout << expression->val << endl;
      cout << expression->next->val << endl;
    }
  }
  return 0;
}